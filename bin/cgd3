#!/usr/bin/env python

'''
Callgraph-to-D3 processor.

Convert a callgraph to D3/JavaScript format for viewing in a Web browser.

Usage:
    cgd3 <callgraph> [options]

Options:
    --port PORT         HTTP port to serve over [default: 8080]
    --output DIR        Output directory (will write HTML, JS and JSON)
'''

import cgnet
import docopt
import flask
import json
import networkx
import networkx.readwrite.json_graph
import os.path

args = docopt.docopt(__doc__)

cgname = args['<callgraph>']
graph = cgnet.load(open(cgname, 'r'), cgname)

app = flask.Flask(__name__, static_folder = 'static')

@app.route('/')
def index():
    return '''
<!DOCTYPE html>
<html>
  <head>
    <title>Force-Directed Layout</title>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.4.11/d3.min.js"></script>
    <link type="text/css" rel="stylesheet" href="callgraph.css"/>
  </head>
  <body>
    <div id="chart"></div>
    <script type="text/javascript" src="callgraph.js"></script>
  </body>
</html>
'''

@app.route('/<path:path>')
def serve_static(path):
    print(path)
    if path == 'callgraph.css':
        return flask.Response('''
rectangle.node {
  stroke: #fff;
  stroke-width: 1.5px;
}

line.link {
  stroke: #999;
  stroke-opacity: .6;
}''', mimetype = 'text/css')

    elif path == 'callgraph.json':
        nldata = networkx.readwrite.json_graph.node_link_data(graph)
        return flask.Response(json.dumps(nldata), mimetype = 'application/json')

    elif path == 'callgraph.js':
        return flask.Response('''
var w = 800,
    h = 600,
    fill = d3.scale.category20();

var vis = d3.select("#chart")
  .append("svg:svg")
    .attr("width", "100%")
    .attr("height", h);

d3.json("callgraph.json", function(json) {
  var force = d3.layout.force()
      .charge(-220)
      .linkDistance(250)
      .nodes(json.nodes)
      .links(json.links)
      .size([w, h])
      .start();

  var link = vis.selectAll("line.link")
      .data(json.links)
    .enter().append("svg:line")
      .attr("class", "link")
      .attr("marker-end", 'url(#end)')
      .style("stroke-width", function(d) { return Math.sqrt(d.value); })
      .attr("x1", function(d) { return d.source.x + 100; })
      .attr("y1", function(d) { return d.source.y + 25; })
      .attr("x2", function(d) { return d.target.x + 100; })
      .attr("y2", function(d) { return d.target.y + 25; });

  var node = vis.selectAll("rectangle.node")
      .data(json.nodes)
    .enter().append("svg:rect")
      .attr("class", "node")
      .attr("x", function(d) { return d.x; })
      .attr("y", function(d) { return d.y; })
      .attr("width", 200)
      .attr("height", 50)
      .style("stroke", "rgb(0,0,0)")
      .style("stroke-width", 2)
      .style("fill", function(d) { return fill(d); })
      .call(force.drag);

  node.append("svg:title")
      .text(function(d) { return d.id; });

  vis.append("svg:defs").selectAll("marker")
    .data(["end"])      // Different link/path types can be defined here
  .enter().append("svg:marker")    // This section adds in the arrows
    .attr("id", String)
    .attr("viewBox", "0 -5 10 10")
    .attr("refX", 15)
    .attr("refY", -1.5)
    .attr("markerWidth", 40)
    .attr("markerHeight", 60)
    .attr("orient", "auto")
  .append("svg:path")
    .attr("d", "M0,-5L10,0L0,5");

  force.on("tick", function() {
    link.attr("x1", function(d) { return d.source.x + 100; })
        .attr("y1", function(d) { return d.source.y + 25; })
        .attr("x2", function(d) { return d.target.x + 100; })
        .attr("y2", function(d) { return d.target.y + 25; });

    node.attr("x", function(d) { return d.x; })
        .attr("y", function(d) { return d.y; });
  });
});
''', mimetype = 'application/javascript')

    return path

app.run(port = int(args['--port']))
